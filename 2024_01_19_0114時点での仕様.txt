・コンストラクタ
各種パラメータの設定
盤面サイズ、荷物の数、乱数のシード、地形の構築回数、荷物を運ぶ回数、壁タイルを配置する割合、訪問済みに変える割合
を受け取る。
割合のパラメータは0~1の値に直す


・InitSettings
壁タイルを床タイル上に配置する。床タイルの数からプレイヤーと荷物の総数を引いた数を100%としたときのパラメータの割合だけ配置
3方向以上が壁で囲まれている床タイルや、分断された地形が生じないようにする。

初期状態の時点で動かすことのできない荷物が生じないように荷物を規定数配置する。

残りの床タイルの中からランダムなマスにプレイヤーを配置


・RunSimulation
地形の構築回数だけ、以下の処理を繰り返す。
{
  床タイルをパラメータの割合だけ訪問済みに変える。
  ここではプレイヤーの訪問回数に1ずつ追加しておく
  
  荷物を運ぶ回数と終了条件を達成するまで、以下の処理を繰り返す。
  （終了条件は「全ての荷物を動かしている」、「このまま地形構築をすると初期状態で動かせない荷物が存在しない」、「荷物の周囲3方向以上が未訪問でない」の3点）
  {
    プレイヤーの移動経路の候補を列挙
    
    適切な経路を選択する
    {
      荷物ごとに、各々の荷物が持つすべての経路のスコアの連想配列を作る。
      スコアは小さい方がよい。
      各経路に沿って移動させた後の盤面を作る。
      以下のパラメータを取得
      ・2x2、2x3、3x3のスペースの数のカウント
      ・荷物の周囲が未訪問の行き止まりもしくは孤島になっている荷物の数
      ・未訪問の角にある荷物の数
      ・盤面の外周の辺もしくは角にある荷物の数
      現在は2x3のスペースの数、荷物の数関連のパラメータの総和をスコアとしている。
      スコアが最も小さい荷物と経路のインデックスとそのスコアを記録しておく。
      スコアが最も小さい経路を、経路の移動数でソートする。
      ソートされた経路の中から、最も移動数が多い経路の中からランダムに選ぶ。
    }
    
    選択された移動経路に沿ってプレイヤーと荷物を移動
    解の上界を求めるために、経路の長さだけ加算する
    履歴に重複がないか確認し、重複があった場合は、とりあえず重複が生じる荷物の運搬の1つ前の荷物の運搬の最終状態を出力としてループを抜ける
  }
  
  プレイヤーと荷物の移動履歴を見て、いずれも一度も訪問していないタイルを壁に変換
  上記ループでの履歴をループ別に保存
}
ゴール位置を設定し、荷物とゴールの対応を作る


・TODO
2x2、2x3、3x3のスペースの数のカウントによる解の上界と実際の最短経路の大きさを調べる
最も移動数が多い経路の中からランダムに選ぶ部分を、
・移動数が多い経路の中からランダムに選ぶ
・荷物の持ち替えが最も多い経路を選ぶ
・完全ランダムに選ぶ
に変えてみる


・やりたいこと
倉庫番における難しい問題は、
・荷物がどのゴール地点に対応するのかがわからない
・ゴールへの格納手順がわからない
という部分が強い。

自分の問題生成アルゴリズムは、解の手順から生成される問題の難易度を見積もって生成するようにしている。
しかし、荷物の格納順や、何回、どの程度の長さだけ荷物を移動させればいいのかを経路の選択基準に含められていない。
従って、意図的にゴールへの格納手順を推測しにくい問題を作ることができない。
これら
・なるべく多様で面白い問題を高速で生成できるようにしたい
・特に解の手順から生成される問題の難易度を見積もることができるようにしたい
・なるべく難易度評価は単純にしたい (少ない項目で人間の感じる難易度と相関のある評価をしたい)